---
#for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done
## Add Docker's official GPG key:
#sudo apt-get update
#sudo apt-get install ca-certificates curl
#sudo install -m 0755 -d /etc/apt/keyrings
#sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
#sudo chmod a+r /etc/apt/keyrings/docker.asc

# Add the repository to Apt sources:
#echo \
#  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
#  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
#  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
#sudo apt-get update
#sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
#
#sudo apt-get install -y apt-transport-https ca-certificates curl gnupg
## If the folder `/etc/apt/keyrings` does not exist, it should be created before the curl command, read the note below.
# sudo mkdir -p -m 755 /etc/apt/keyrings
#curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
#sudo chmod 644 /etc/apt/keyrings/kubernetes-apt-keyring.gpg # allow unprivileged APT programs to read this keyring
#echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
#sudo chmod 644 /etc/apt/sources.list.d/kubernetes.list   # helps tools such as command-not-found to work correctly
#sudo apt-get update
#sudo apt-get install -y kubectl
#apt-cache madison kubectl | awk '{ print $3 }'



- name: Ensure br_netfilter is enabled.
  modprobe:
    name: br_netfilter
    state: present

- name: creating containerd config directory
  file:
    path: /etc/cni/net.d
    state: directory

- name: creating containerd config directory
  file:
    path: /etc/containerd
    state: directory

- name: Copy docker deamon iles
  template: src="{{ item.src }}" dest="{{ item.dest }}"
  with_items:
     - { src: 'config.toml.j2', dest: '/etc/containerd/config.toml' }  
     - { src: 'k8s.conf.modules.j2', dest: '/etc/sysctl.d/k8s.conf' }  
     - { src: 'containerd.conf.j2', dest: '/etc/modules-load.d/containerd.conf' }       
     - { src: '99-kubernetes-cri.conf.j2', dest: '/etc/sysctl.d/99-kubernetes-cri.conf' }  
     - { src: '10-containerd-net.conflist.j2' , dest: '/etc/cni/net.d/10-containerd-net.conflist' }

- name: set bridge-nf-call-iptables
  sysctl:
    name: net.bridge.bridge-nf-call-iptables
    value: 1
    sysctl_set: yes
    state: present
    reload: yes
  ignore_errors: yes

- name: ip_forward
  sysctl:
    name: net.ipv4.ip_forward
    value: 1
    sysctl_set: yes
    state: present
    reload: yes
  ignore_errors: yes

- name: /etc/systemd/system/kubelet.service.d
  file:
    path: /etc/systemd/system/kubelet.service.d
    state: directory

- name: kubelet configuration
  template: src=0-cri-containerd.conf.j2 dest=/etc/systemd/system/kubelet.service.d/0-cri-containerd.conf

- name: Increasing fs notify max user instances and watches
  shell: sudo sysctl -w fs.inotify.max_user_instances=8192; sudo sysctl -w fs.inotify.max_user_watches=12288;

