---
#for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done
## Add Docker's official GPG key:
#sudo apt-get update
#sudo apt-get install ca-certificates curl
#sudo install -m 0755 -d /etc/apt/keyrings
#sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
#sudo chmod a+r /etc/apt/keyrings/docker.asc

# Add the repository to Apt sources:
#echo \
#  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
#  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
#  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
#sudo apt-get update
#sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
#
#sudo apt-get install -y apt-transport-https ca-certificates curl gnupg
## If the folder `/etc/apt/keyrings` does not exist, it should be created before the curl command, read the note below.
# sudo mkdir -p -m 755 /etc/apt/keyrings
#curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
#sudo chmod 644 /etc/apt/keyrings/kubernetes-apt-keyring.gpg # allow unprivileged APT programs to read this keyring
#echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
#sudo chmod 644 /etc/apt/sources.list.d/kubernetes.list   # helps tools such as command-not-found to work correctly
# apt update -y --allow-insecure-repositories
#   //apt install -y kubectl=1.26.0-2.1 kubelet=1.26.0-2.1 kubeadm=1.26.0-2.1 --allow-unauthenticated
#   //init --upload-certs --skip-phases=addon/kube-proxy
#   //join --apiserver-advertise-address=<master-node-ip>
#apt-cache madison kubectl | awk '{ print $3 }'

- name: Install ntp
  apt:
     name: "{{ item }}"
     state: present
     update_cache: yes
  loop:
    - ntp
    - curl
    - apt-transport-https
    - ca-certificates 
    - software-properties-common

##### Docker 
- name:  getting apt-key.gpg for docker
  shell:
    cmd: "{{ item }}"
  loop:
    - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
    - add-apt-repository  "deb [arch=amd64] https://download.docker.com/linux/ubuntu  $(lsb_release -cs)  stable"

- name: Install docker
  apt:
     name: "{{ item }}"
     state: present
     update_cache: yes
  loop:
    - docker-ce={{ docker_ce_ubuntu }}

- name: Setup docker daemon.
  file:
    path: /etc/systemd/system/docker.service.d
    state: directory

- name: Copy docker deamon iles
  template: src=daemon.json.j2  dest=/etc/docker/daemon.json
  notify: restart docker      

##### K8      
- name:  getting apt-key.gpg Kubernetes
  shell:
    cmd: curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg |  apt-key add -

- name: Creating a repository file for Kubernetes
  file:
    path: /etc/apt/sources.list.d/kubernetes.list
    state: touch

- name: Adding repository details in Kubernetes repo file.
  blockinfile:
    path: /etc/apt/sources.list.d/kubernetes.list
    block: |
         deb https://apt.kubernetes.io/ kubernetes-xenial main   

- name: Install kubelet kubeadm kubectl
  apt:
     name: "{{ item }}"
     state: present
     update_cache: yes
  loop:
    - kubelet={{ ubunutu_k8_version }}
    - kubectl={{ ubunutu_k8_version }}
    - kubeadm={{ ubunutu_k8_version }}

- name: Increasing fs notify max user instances and watches
  shell: sudo sysctl -w fs.inotify.max_user_instances=8192; sudo sysctl -w fs.inotify.max_user_watches=12288;
